/* create table script */
CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    name VARCHAR(10) NOT NULL,
    join_date DATE NOT NULL,
    department VARCHAR(10) NOT NULL
);
/* insert script */ 
INSERT INTO employees (employee_id, name, join_date, department)
VALUES
    (1, 'Alice', '2018-06-15', 'IT'),
    (2, 'Bob', '2019-02-10', 'Finance'),
    (3, 'Charlie', '2017-09-20', 'HR'),
    (4, 'David', '2020-01-05', 'IT'),
    (5, 'Eve', '2016-07-30', 'Finance'),
    (6, 'Sumit', '2016-06-30', 'Finance');
 
/* create table scripts */
CREATE TABLE salary_history (
    employee_id INT,
    change_date DATE NOT NULL,
    salary DECIMAL(10,2) NOT NULL,
    promotion VARCHAR(3)
);
/* insert script */ 
INSERT INTO salary_history (employee_id, change_date, salary, promotion)
VALUES
    (1, '2018-06-15', 50000, 'No'),
    (1, '2019-08-20', 55000, 'No'),
    (1, '2021-02-10', 70000, 'Yes'),
    (2, '2019-02-10', 48000, 'No'),
    (2, '2020-05-15', 52000, 'Yes'),
    (2, '2023-01-25', 68000, 'Yes'),
    (3, '2017-09-20', 60000, 'No'),
    (3, '2019-12-10', 65000, 'No'),
    (3, '2022-06-30', 72000, 'Yes'),
    (4, '2020-01-05', 45000, 'No'),
    (4, '2021-07-18', 49000, 'No'),
    (5, '2016-07-30', 55000, 'No'),
    (5, '2018-11-22', 62000, 'Yes'),
    (5, '2021-09-10', 75000, 'Yes'),
    (6, '2016-06-30', 55000, 'No'),
    (6, '2017-11-22', 50000, 'No'),
    (6, '2018-11-22', 40000, 'No'),
    (6, '2021-09-10', 75000, 'Yes')



WITH CTE as 
(
select *
,RANK()OVER (PARTITION BY employee_id order by change_date desc) as RANK_DESC
,RANk()OVER (PARTITION BY EMPLOYEE_ID ORDER BY CHANGE_DATE ASC) AS RANK_ASC
from salary_history
),
--LATEST SALARY

latest_salary as 
(
select employee_id , salary from CTE
where rank_desc=1
) , 
total_promotions as
(
select employee_id, count(*)  as No_promotions from CTE
where promotion='Yes'
group by employee_id
),
previous_salary as 
(
select * ,
LEAD(salary,1) OVER (PARTITION by employee_id order by change_date desc) as prev_salary
from CTE
),
salary_growth as 
(
select employee_id,max(round((salary- prev_salary )*100 / prev_salary ,2))

from previous_salary
group by employee_id
),
salary_never_decreased as 
(
select distinct employee_id ,'N' as never_decreased

from previous_salary
where salary< prev_salary
), 
Next_date as
(
select employee_id , 
change_date,
LEAD(change_date) OVER (PARTITION BY employee_id order by change_date) as next_date
 from salary_history
),
Avg_months as 
(
select  employee_id,
AVG(DATE_PART('year', AGE(next_date,change_date )) * 12 +
       DATE_PART('month', AGE(next_date,change_date)))
	   as months_diff
from Next_date
group by employee_id
),
salary_growth_ratio as
(
select employee_id ,min(change_date) as join_date , 
round((max(case when RANK_DESC=1 then salary END)/
max(case when RANK_ASC=1 then salary END)) , 2) as salary_growth from CTE
group by employee_id
),
salary_growth_rank as
(
select * , RANK() OVER (ORDER BY salary_growth desc,join_date ) as rnk

from salary_growth_ratio
)
select   e.employee_id , e.name 
,ls.salary as latest_salary
,No_promotions
,sr.salary_growth
,rnk
,months_diff
,COALESCE(nd.never_decreased ,'Y') as salary_decreased

from employees e
LEFT JOIN latest_salary ls on e.employee_id=ls.employee_id
LEFT JOIN total_promotions tp on tp.employee_id=ls.employee_id
LEFT JOIN salary_growth_ratio sg on tp.employee_id=sg.employee_id
LEFT JOIN salary_growth_rank sr on sr.employee_id=sg.employee_id
LEFT JOIN Avg_months am on am.employee_id=sg.employee_id
LEFT JOIN salary_never_decreased nd on ls.employee_id=nd.employee_id
